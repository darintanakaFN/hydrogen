{"version":3,"sources":["../../src/vite/get-virtual-routes.ts"],"names":["fileUrlToPath","url","path","VIRTUAL_ROUTES_DIR","VIRTUAL_ROUTES_ROUTES_DIR_PARTS","VIRTUAL_ROUTES_DIR_PARTS","VIRTUAL_ROOT","getVirtualRoutesPath","pathParts","forFile","basePath","virtualRoutesPath","working","dirPart","getVirtualRoutesV3","VIRTUAL_ROUTES_DIR_ORIG","VIRTUAL_ROOT_ORIG","getVirtualRoutes","distPath"],"mappings":"oBAAO,SAASA,CAAAA,CAAcC,CAAAA,CAAqB,CACjD,GAAI,OAAOA,CAAAA,EAAQ,QAAA,CACjB,MAAM,IAAI,UAAU,4CAA4C,CAAA,CAElE,GAAI,CAACA,CAAAA,CAAI,UAAA,CAAW,SAAS,CAAA,CAC3B,MAAM,IAAI,SAAA,CAAU,6BAA6B,CAAA,CAGnD,IAAIC,CAAAA,CAAOD,CAAAA,CAAI,OAAA,CAAQ,eAAA,CAAiB,EAAE,CAAA,CAG1C,OACEC,CAAAA,CAAO,GAAA,CAAMA,EAMfA,CAAAA,CAAO,kBAAA,CAAmBA,CAAI,CAAA,CAEvBA,CACT,KAIaC,CAAAA,CAAqB,4BAAA,CACrBC,CAAAA,CAAkC,CAC7C,MAAA,CACA,gBAAA,CACA,QACF,CAAA,CACaC,CAAAA,CAA2B,CAAC,MAAA,CAAQ,gBAAgB,CAAA,CACpDC,EAAe,mCAE5B,SAASC,CAAAA,CACPC,CAAAA,CACAC,CAAAA,CACQ,CACR,IAAMC,CAAAA,CAAW,IAAI,GAAA,CAAI,KAAA,CAAO,MAAA,CAAA,IAAA,CAAY,GAAG,EACzCC,CAAAA,CAAoBH,CAAAA,CAAU,MAAA,CAAO,CAACI,CAAAA,CAASC,CAAAA,GAC5C,IAAI,GAAA,CAAI,CAAA,EAAGA,CAAO,CAAA,CAAA,CAAA,CAAKD,CAAO,CAAA,CACpCF,CAAQ,CAAA,CAGX,OAAO,IAAI,GAAA,CAAID,CAAAA,CAASE,CAAiB,EAAE,QAAA,CAAS,OAAA,CAClD,gBAAA,CACA,GACF,CACF,CAEA,eAAsBG,CAAAA,EAAqB,CACzC,OAAO,CACL,MAAA,CAAQ,CACN,CACE,EAAA,CAAI,CAAA,EAAGX,CAAkB,CAAA,SAAA,CAAA,CACzB,IAAA,CAAM,UAAA,CACN,KAAMI,CAAAA,CACJH,CAAAA,CACA,cACF,CAAA,CACA,KAAA,CAAO,KACT,EACA,CACE,EAAA,CAAI,CAAA,EAAGD,CAAkB,CAAA,oBAAA,CAAA,CACzB,IAAA,CAAM,sBACN,IAAA,CAAMI,CAAAA,CACJH,CAAAA,CACA,yBACF,CAAA,CACA,KAAA,CAAO,KACT,CAAA,CACA,CACE,EAAA,CAAI,CAAA,EAAGD,CAAkB,CAAA,yDAAA,CAAA,CACzB,KAAM,kDAAA,CACN,IAAA,CAAMI,CAAAA,CACJH,CAAAA,CACA,8DACF,CAAA,CACA,MAAO,KACT,CAAA,CACA,CACE,EAAA,CAAI,CAAA,EAAGD,CAAkB,SACzB,IAAA,CAAM,EAAA,CACN,IAAA,CAAMI,CAAAA,CACJH,CAAAA,CACA,WACF,EACA,KAAA,CAAO,IACT,CACF,CAAA,CACA,MAAA,CAAQ,CACN,KAAMG,CAAAA,CAAqBF,CAAAA,CAA0B,YAAY,CACnE,CACF,CACF,CAGO,IAAMU,CAAAA,CAA0B,uBAAA,CAC1BC,CAAAA,CAAoB,0CAEjC,eAAsBC,GAAmB,CACvC,IAAMC,CAAAA,CAAWhB,CAAAA,CAAK,OAAA,CAAQF,CAAAA,CAAc,YAAY,GAAG,CAAC,CAAA,CAClCE,CAAAA,CAAK,IAAA,CAAKgB,EAAUH,CAAuB,EAErE,OAAO,CAEL,IAAA,CAAM,CACJ,GAAIC,CAAAA,CACJ,IAAA,CAAM,EAAA,CACN,IAAA,CAAMd,CAAAA,CAAK,IAAA,CAAKgB,EAAUF,CAAAA,CAAoB,MAAM,CACtD,CACF,CACF","file":"get-virtual-routes-ITQURL7P.js","sourcesContent":["export function fileUrlToPath(url: string): string {\n  if (typeof url !== 'string') {\n    throw new TypeError('The \"url\" argument must be of type string.');\n  }\n  if (!url.startsWith('file://')) {\n    throw new TypeError('The URL must be a file URL.');\n  }\n\n  let path = url.replace(/^file:\\/\\/\\/*/, '');\n\n  // Handle Windows drive letters\n  if (/^[a-zA-Z]:/.test(path)) {\n    path = '/' + path;\n  } else {\n    path = '/' + path;\n  }\n\n  // Decode percent-encoded characters\n  path = decodeURIComponent(path);\n\n  return path;\n}\nimport path from 'node:path';\n\n// v3_routeConfig virtual routes constants\nexport const VIRTUAL_ROUTES_DIR = 'vite/virtual-routes/routes';\nexport const VIRTUAL_ROUTES_ROUTES_DIR_PARTS = [\n  'vite',\n  'virtual-routes',\n  'routes',\n];\nexport const VIRTUAL_ROUTES_DIR_PARTS = ['vite', 'virtual-routes'];\nexport const VIRTUAL_ROOT = 'vite/virtual-routes/virtual-root';\n\nfunction getVirtualRoutesPath(\n  pathParts: Array<string>,\n  forFile: string,\n): string {\n  const basePath = new URL('../', import.meta.url);\n  const virtualRoutesPath = pathParts.reduce((working, dirPart) => {\n    return new URL(`${dirPart}/`, working);\n  }, basePath);\n\n  // Getting rid of the drive path (ie. '/C:/') in windows\n  return new URL(forFile, virtualRoutesPath).pathname.replace(\n    /^\\/[a-zA-Z]:\\//,\n    '/',\n  );\n}\n\nexport async function getVirtualRoutesV3() {\n  return {\n    routes: [\n      {\n        id: `${VIRTUAL_ROUTES_DIR}/graphiql`,\n        path: 'graphiql',\n        file: getVirtualRoutesPath(\n          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,\n          'graphiql.jsx',\n        ),\n        index: false,\n      },\n      {\n        id: `${VIRTUAL_ROUTES_DIR}/subrequest-profiler`,\n        path: 'subrequest-profiler',\n        file: getVirtualRoutesPath(\n          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,\n          'subrequest-profiler.jsx',\n        ),\n        index: false,\n      },\n      {\n        id: `${VIRTUAL_ROUTES_DIR}/[.]well-known.appspecific.com[.]chrome[.]devtools[.]json`,\n        path: '.well-known/appspecific/com.chrome.devtools.json',\n        file: getVirtualRoutesPath(\n          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,\n          '[.]well-known.appspecific.com[.]chrome[.]devtools[.]json.jsx',\n        ),\n        index: false,\n      },\n      {\n        id: `${VIRTUAL_ROUTES_DIR}/index`,\n        path: '',\n        file: getVirtualRoutesPath(\n          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,\n          'index.jsx',\n        ),\n        index: true,\n      },\n    ],\n    layout: {\n      file: getVirtualRoutesPath(VIRTUAL_ROUTES_DIR_PARTS, 'layout.jsx'),\n    },\n  };\n}\n\n// original virtual routes constants\nexport const VIRTUAL_ROUTES_DIR_ORIG = 'virtual-routes/routes';\nexport const VIRTUAL_ROOT_ORIG = 'virtual-routes/virtual-root-with-layout';\n\nexport async function getVirtualRoutes() {\n  const distPath = path.dirname(fileUrlToPath(import.meta.url));\n  const virtualRoutesPath = path.join(distPath, VIRTUAL_ROUTES_DIR_ORIG);\n\n  return {\n    //routes,\n    root: {\n      id: VIRTUAL_ROOT_ORIG,\n      path: '',\n      file: path.join(distPath, VIRTUAL_ROOT_ORIG + '.jsx'),\n    },\n  };\n}\n"]}